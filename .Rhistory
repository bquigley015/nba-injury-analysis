library(MASS)
model <- lda(Class ~ ., data = trainingData)
predicted <- predict(model, newdata = testData)$class
error <- mean(predicted != testData$Class)
error
}
runExperiments <- function(beta0, beta1, beta2, nTrain, nTest, nTrials = 500) {
svmErrors <- numeric(nTrials)
logRegErrors <- numeric(nTrials)
ldaErrors <- numeric(nTrials)
for (i in 1:nTrials) {
dataSplit <- generateTrainTestData(beta0, beta1, beta2, nTrain, nTest)
train <- dataSplit$trainingData
test <- dataSplit$testData
svmErrors[i] <- fitSVM(train, test)
logRegErrors[i] <- fitLogReg(train, test)
ldaErrors[i] <- fitLDA(train, test)
}
results <- list(
svmAvgError = mean(svmErrors),
logRegAvgError = mean(logRegErrors),
ldaAvgError = mean(ldaErrors),
svmMaxError = max(svmErrors),
logRegMaxError = max(logRegErrors),
ldaMaxError = max(ldaErrors)
)
return(results)
}
set.seed(1)
expResults <- runExperiments(beta0 = 1, beta1 = 2, beta2 = -3, nTrain = 20, nTest = 200, nTrials = 500)
print(expResults)
generateData <- function(beta0, beta1, beta2, n) {
X1 <- runif(n, -10, 10)
X2 <- runif(n, -10, 10)
Y <- beta0 + beta1 * X1 + beta2 * X2
class <- ifelse(Y > 0, 1, 0)
data.frame(X1 = X1, X2 = X2, Class = as.factor(class))
}
#install.packages("ggplot2")
#library(ggplot2)
plotData <- function(data, beta0, beta1, beta2) {
labels <- unique(data$Class)
colors <- ifelse(data$Class == labels[1], "blue", "red")
plot(data$X1, data$X2, col = colors, pch = 19, xlab = "X1", ylab = "X2",
main = "Dataset and Hyperplane")
xVals <- seq(min(data$X1), max(data$X1), length.out = 100)
yVals <- -(beta0 + beta1 * xVals) / beta2
lines(xVals, yVals, col = "black", lty = 2, lwd = 2)
}
set.seed(1)
myData <- generateData(beta0 = 1, beta1 = 2, beta2 = -3, n = 100)
plotData(myData, beta0 = 1, beta1 = 2, beta2 = -3)
generateTrainTestData <- function(beta0, beta1, beta2, nTrain, nTest) {
trainingData <- generateData(beta0, beta1, beta2, nTrain)
testData <- generateData(beta0, beta1, beta2, nTest)
list(trainingData = trainingData, testData = testData)
}
set.seed(1)
splitData <- generateTrainTestData(beta0 = 1, beta1 = 2, beta2 = -3, nTrain = 20, nTest = 200)
plotData(splitData$trainingData, beta0 = 1, beta1 = 2, beta2 = -3)
plotData(splitData$testData, beta0 = 1, beta1 = 2, beta2 = -3)
library(e1071)
fitSVM <- function(trainingData, testData) {
model <- svm(Class ~ ., data = trainingData, kernel = "linear", cost = 1)
predicted <- predict(model, newdata = testData)
error <- mean(predicted != testData$Class)
error
}
fitLogReg <- function(trainingData, testData) {
model <- suppressWarnings(glm(Class ~ ., data = trainingData, family = binomial))
predicted <- predict(model, newdata = testData, type = "response")
predicted <- ifelse(predicted > 0.5, 1, 0)
error <- mean(predicted != as.numeric(as.character(testData$Class)))
error
}
fitLDA <- function(trainingData, testData) {
library(MASS)
model <- lda(Class ~ ., data = trainingData)
predicted <- predict(model, newdata = testData)$class
error <- mean(predicted != testData$Class)
error
}
runExperiments <- function(beta0, beta1, beta2, nTrain, nTest, nTrials = 500) {
svmErrors <- numeric(nTrials)
logRegErrors <- numeric(nTrials)
ldaErrors <- numeric(nTrials)
for (i in 1:nTrials) {
dataSplit <- generateTrainTestData(beta0, beta1, beta2, nTrain, nTest)
train <- dataSplit$trainingData
test <- dataSplit$testData
svmErrors[i] <- fitSVM(train, test)
logRegErrors[i] <- fitLogReg(train, test)
ldaErrors[i] <- fitLDA(train, test)
}
results <- list(
svmAvgError = mean(svmErrors),
logRegAvgError = mean(logRegErrors),
ldaAvgError = mean(ldaErrors),
svmMaxError = max(svmErrors),
logRegMaxError = max(logRegErrors),
ldaMaxError = max(ldaErrors)
)
return(results)
}
set.seed(1)
expResults <- runExperiments(beta0 = 1, beta1 = 2, beta2 = -3, nTrain = 20, nTest = 200, nTrials = 500)
print(expResults)
generateData <- function(beta0, beta1, beta2, n) {
X1 <- runif(n, -10, 10)
X2 <- runif(n, -10, 10)
Y <- beta0 + beta1 * X1 + beta2 * X2
class <- ifelse(Y > 0, 1, 0)
data.frame(X1 = X1, X2 = X2, Class = as.factor(class))
}
#install.packages("ggplot2")
#library(ggplot2)
plotData <- function(data, beta0, beta1, beta2) {
labels <- unique(data$Class)
colors <- ifelse(data$Class == labels[1], "blue", "red")
plot(data$X1, data$X2, col = colors, pch = 19, xlab = "X1", ylab = "X2",
main = "Dataset and Hyperplane")
xVals <- seq(min(data$X1), max(data$X1), length.out = 100)
yVals <- -(beta0 + beta1 * xVals) / beta2
lines(xVals, yVals, col = "black", lty = 2, lwd = 2)
}
set.seed(1)
myData <- generateData(beta0 = 1, beta1 = 2, beta2 = -3, n = 100)
plotData(myData, beta0 = 1, beta1 = 2, beta2 = -3)
generateTrainTestData <- function(beta0, beta1, beta2, nTrain, nTest) {
trainingData <- generateData(beta0, beta1, beta2, nTrain)
testData <- generateData(beta0, beta1, beta2, nTest)
list(trainingData = trainingData, testData = testData)
}
set.seed(1)
splitData <- generateTrainTestData(beta0 = 1, beta1 = 2, beta2 = -3, nTrain = 20, nTest = 200)
plotData(splitData$trainingData, beta0 = 1, beta1 = 2, beta2 = -3)
plotData(splitData$testData, beta0 = 1, beta1 = 2, beta2 = -3)
library(e1071)
fitSVM <- function(trainingData, testData) {
model <- svm(Class ~ ., data = trainingData, kernel = "linear", cost = 1)
predicted <- predict(model, newdata = testData)
error <- mean(predicted != testData$Class)
error
}
fitLogReg <- function(trainingData, testData) {
model <- suppressWarnings(glm(Class ~ ., data = trainingData, family = binomial))
predicted <- predict(model, newdata = testData, type = "response")
predicted <- ifelse(predicted > 0.5, 1, 0)
error <- mean(predicted != as.numeric(as.character(testData$Class)))
error
}
fitLDA <- function(trainingData, testData) {
library(MASS)
model <- lda(Class ~ ., data = trainingData)
predicted <- predict(model, newdata = testData)$class
error <- mean(predicted != testData$Class)
error
}
runExperiments <- function(beta0, beta1, beta2, nTrain, nTest, nTrials = 500) {
svmErrors <- numeric(nTrials)
logRegErrors <- numeric(nTrials)
ldaErrors <- numeric(nTrials)
for (i in 1:nTrials) {
dataSplit <- generateTrainTestData(beta0, beta1, beta2, nTrain, nTest)
train <- dataSplit$trainingData
test <- dataSplit$testData
svmErrors[i] <- fitSVM(train, test)
logRegErrors[i] <- fitLogReg(train, test)
ldaErrors[i] <- fitLDA(train, test)
}
results <- list(
svmAvgError = mean(svmErrors),
logRegAvgError = mean(logRegErrors),
ldaAvgError = mean(ldaErrors),
svmMaxError = max(svmErrors),
logRegMaxError = max(logRegErrors),
ldaMaxError = max(ldaErrors)
)
return(results)
}
set.seed(1)
expResults <- runExperiments(beta0 = 1, beta1 = 2, beta2 = -3, nTrain = 20, nTest = 200, nTrials = 500)
print(expResults)
data <- read.csv("Auto.csv")
data<- data[, sapply(Auto, is.numeric)]
data <- read.csv("Auto.csv")
data<- data[, sapply(data, is.numeric)]
data <- read.csv("Auto.csv")
summary(data)
data<- data[, sapply(data, is.numeric)]
summary(data)
data <- read.csv("Auto.csv")
head(data)
data<- data[, sapply(data, is.numeric)]
head(data)
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
basePCA <- prcomp(data, center = TRUE, scale. = FALSE)
autoplot(basePCA, data = data, colour = 'cyl')
#install.packages("ggfortify")
library(ggfortify)
basePCA <- prcomp(data, center = TRUE, scale. = FALSE)
autoplot(basePCA, data = data)
scalePCA <- prcomp(data, center = TRUE, scale. = TRUE)
autoplot(scalePCA, data = data)
customPCA <- function(X, data = TRUE) {
if (d) {
X <- scale(X, center = TRUE, scale = TRUE)
} else {
X <- scale(X, center = TRUE, scale = FALSE)
}
covMatrix <- cov(X)
eig <- eigen(covMatrix)
index <- order(eig$values, decreasing = TRUE)
eig$values <- eig$values[index]
eig$vectors <- eig$vectors[, index]
return(list(sdev = sqrt(eig$values), rotation = eig$vectors))
}
customPCA <- function(X, scaledData = TRUE) {
if (scaledData) {
X <- scale(X, center = TRUE, scale = TRUE)
} else {
X <- scale(X, center = TRUE, scale = FALSE)
}
covMatrix <- cov(X)
eig <- eigen(covMatrix)
index <- order(eig$values, decreasing = TRUE)
eig$values <- eig$values[index]
eig$vectors <- eig$vectors[, index]
return(list(sdev = sqrt(eig$values), rotation = eig$vectors))
}
customBasePCA <- customPCA(data, scaledData = FALSE)
customScalePCA <- customPCA(data, scaledData = TRUE)
customPCA <- function(X, scaledData = TRUE) {
if (scaledData) {
X <- scale(X, center = TRUE, scale = TRUE)
} else {
X <- scale(X, center = TRUE, scale = FALSE)
}
covMatrix <- cov(X)
eig <- eigen(covMatrix)
index <- order(eig$values, decreasing = TRUE)
eig$values <- eig$values[index]
eig$vectors <- eig$vectors[, index]
return(list(sdev = sqrt(eig$values), rotation = eig$vectors))
}
customBasePCA <- customPCA(data, scaledData = FALSE)
customScalePCA <- customPCA(data, scaledData = TRUE)
autoplot(customBasePCA, data = data)
customPCA <- function(X, scaledData = TRUE) {
if (scaledData) {
X <- scale(X, center = TRUE, scale = TRUE)
} else {
X <- scale(X, center = TRUE, scale = FALSE)
}
covMatrix <- cov(X)
eig <- eigen(covMatrix)
index <- order(eig$values, decreasing = TRUE)
eig$values <- eig$values[index]
eig$vectors <- eig$vectors[, index]
return(list(sdev = sqrt(eig$values), rotation = eig$vectors))
}
customBasePCA <- customPCA(data, scaledData = FALSE)
customScalePCA <- customPCA(data, scaledData = TRUE)
customBaseVar <- customBasePCA$sdev^2 / sum(customBasePCA$sdev^2)
customScaleVar <- customScalePCA$sdev^2 / sum(customScalePCA$sdev^2)
cat("\nBase PCA (not scaled):\n")
cat(round(cbind(Custom = customBaseVar, prcomp = summary(basePCA)$importance[2, ]), 4), "\n")
cat("\nScaled PCA:\n")
cat(round(cbind(Custom = customScaleVar, prcomp = summary(scalePCA)$importance[2, ]), 4), "\n")
library(tidyverse)
install.packages("tidyverse")
install.packages("mclust")
install.packages("cluster")
install.packages("factoextra")
library(tidyverse)
library(mclust)
library(cluster)
library(factoextra)
hitters <- read.csv("Hitters.csv")
#install.packages("tidyverse")
#install.packages("mclust")
#install.packages("cluster")
#install.packages("factoextra")
library(tidyverse)
library(mclust)
library(cluster)
library(factoextra)
hitters <- read.csv("Hitters.csv")
head(hitters)
hitters_clean <- na.omit(hitters)
hitters_numeric <- hitters_clean %>% select_if(is.numeric)
hitters_scaled <- scale(hitters_numeric)
set.seed(1)
k <- 3
km_res <- kmeans(hitters_scaled, centers = k, nstart = 25)
fviz_cluster(km_res, data = hitters_scaled) + ggtitle("K-means Clustering")
gmm_res <- Mclust(hitters_scaled, G=3)
summary(gmm_res)
fviz_mclust(gmm_res, "classification", geom = "point", ellipse.type = "norm") +
ggtitle("GMM Clustering")
sil_kmeans <- silhouette(km_res$cluster, dist(hitters_scaled))
mean(sil_kmeans[, 3])
sil_gmm <- silhouette(gmm_res$classification, dist(hitters_scaled))
mean(sil_gmm[, 3])
gmm_res$BIC
#install.packages("tidyverse")
#install.packages("mclust")
#install.packages("cluster")
#install.packages("factoextra")
library(tidyverse)
library(mclust)
library(cluster)
library(factoextra)
hitters <- read.csv("Hitters.csv")
hitters <- na.omit(hitters)
hitters <- hitters %>% select_if(is.numeric)
hitters <- scale(hitters)
k <- 3
km <- kmeans(hitters, centers = k, nstart = 25)
fviz_cluster(km, data = hitters) + ggtitle("K-means Clustering")
gmm <- Mclust(hitters, G = k)
fviz_mclust(gmm, "classification", geom = "point", ellipse.type = "norm") +
ggtitle("GMM Clustering")
#install.packages("tidyverse")
#install.packages("mclust")
#install.packages("cluster")
#install.packages("factoextra")
library(tidyverse)
library(mclust)
library(factoextra)
hitters <- read.csv("Hitters.csv")
hitters <- na.omit(hitters)
hitters <- hitters %>% select_if(is.numeric)
hitters <- scale(hitters)
k <- 3
km <- kmeans(hitters, centers = k, nstart = 25)
fviz_cluster(km, data = hitters) + ggtitle("K-means Clustering")
gmm <- Mclust(hitters, G = k)
fviz_mclust(gmm, "classification", geom = "point", ellipse.type = "norm") +
ggtitle("GMM Clustering")
#install.packages("tidyverse")
#install.packages("mclust")
#install.packages("cluster")
#install.packages("factoextra")
library(tidyverse)
library(mclust)
library(factoextra)
hitters <- read.csv("Hitters.csv")
hitters <- na.omit(hitters)
hitters <- hitters %>% select_if(is.numeric)
hitters <- scale(hitters)
k <- 5
km <- kmeans(hitters, centers = k, nstart = 25)
fviz_cluster(km, data = hitters) + ggtitle("K-means Clustering")
gmm <- Mclust(hitters, G = k)
fviz_mclust(gmm, "classification", geom = "point", ellipse.type = "norm") +
ggtitle("GMM Clustering")
#install.packages("tidyverse")
#install.packages("mclust")
#install.packages("cluster")
#install.packages("factoextra")
library(tidyverse)
library(mclust)
library(factoextra)
hitters <- read.csv("Hitters.csv")
hitters <- na.omit(hitters)
hitters <- hitters %>% select_if(is.numeric)
hitters <- scale(hitters)
k <- 3
km <- kmeans(hitters, centers = k, nstart = 25)
fviz_cluster(km, data = hitters) + ggtitle("K-means Clustering")
gmm <- Mclust(hitters, G = k)
fviz_mclust(gmm, "classification", geom = "point", ellipse.type = "norm") +
ggtitle("GMM Clustering")
install.packages("tidyverse")
install.packages("lubridate")
install.packages("tidyverse")
#install.packages("tidyverse")
install.packages("lubridate")
library(tidyverse)
library(lubridate)
data <- read_csv("injury.csv",
col_types = cols(
Date        = col_date(format = ""),
Acquired    = col_character(),
Relinquished= col_character(),
.default    = col_guess()
))
cutoff <- ymd("2000-10-30")
dataClean <- data %>%
filter(Date > cutoff)
dataClean <- dataClean %>%
filter(is.na(Acquired))
write_csv(df_clean, "cleaninjury.csv")
#install.packages("tidyverse")
install.packages("lubridate")
library(tidyverse)
library(lubridate)
data <- read_csv("injury.csv",
col_types = cols(
Date        = col_date(format = ""),
Acquired    = col_character(),
Relinquished= col_character(),
.default    = col_guess()
))
cutoff <- ymd("2000-10-30")
dataClean <- data %>%
filter(Date > cutoff)
dataClean <- dataClean %>%
filter(is.na(Acquired))
write_csv(dataClean, "cleaninjury.csv")
#install.packages("tidyverse")
#install.packages("lubridate")
library(tidyverse)
library(lubridate)
data <- read_csv("injury.csv",
col_types = cols(
Date        = col_date(format = ""),
Acquired    = col_character(),
Relinquished= col_character(),
.default    = col_guess()
))
cutoff <- ymd("2000-10-30")
dataClean <- data %>%
filter(Date > cutoff)
dataClean <- dataClean %>%
filter(is.na(Acquired))
write_csv(dataClean, "cleaninjury.csv")
stats <- read_csv("stats.csv",
col_types = cols(
season = col_integer(),
.default = col_guess()
))
stats_clean <- stats %>%
filter(season >= 2000)
write_csv(stats_clean, "cleanstats.csv")
stats <- read_csv("path/to/your/playerstats.csv",
col_types = cols(
season = col_character(),
.default = col_guess()
))
stats <- read_csv("playerstats.csv",
col_types = cols(
season = col_character(),
.default = col_guess()
))
stats <- stats %>%
mutate(season_start = as.integer(str_sub(season, 1, 4)))
stats_clean <- stats %>%
filter(season_start >= 2000) %>%
select(-season_start)
write_csv(stats_clean, "cleanplayerstats.csv")
stats <- read_csv("playerstats.csv",
col_types = cols(
season = col_character(),
draft_year = col_integer(),
.default = col_guess()
))
stats <- stats %>%
mutate(season_start = as.integer(str_sub(season, 1, 4)))
statsClean <- stats %>%
filter(
seasonStart >= 2000,
draft_year   >= 2000
) %>%
select(-seasonStart)
stats <- read_csv("playerstats.csv",
col_types = cols(
season = col_character(),
draft_year = col_integer(),
.default = col_guess()
))
stats <- stats %>%
mutate(season_start = as.integer(str_sub(season, 1, 4)))
statsClean <- stats %>%
filter(
season_start >= 2000,
draft_year   >= 2000
) %>%
select(-seasonStart)
stats <- read_csv("playerstats.csv",
col_types = cols(
season = col_character(),
draft_year = col_integer(),
.default = col_guess()
))
stats <- stats %>%
mutate(season_start = as.integer(str_sub(season, 1, 4)))
statsClean <- stats %>%
filter(
season_start >= 2000,
draft_year   >= 2000
) %>%
select(-season_start)
write_csv(statsClean, "cleanplayerstats.csv")
stats <- read_csv("playerstats.csv",
col_types = cols(
season = col_character(),
draft_year = col_integer(),
.default = col_guess()
))
stats <- stats %>%
mutate(season_start = as.integer(str_sub(season, 1, 4)))
statsClean <- stats %>%
filter(
season_start >= 2000,
draft_year   >= 2000
) %>%
select(-season_start)
write_csv(statsClean, "cleanplayerstats.csv")
